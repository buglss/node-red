RED.editor.middlewareList = (function() {

    function buildEditor(id, stateId, value) {
        let editor = RED.editor.createEditor({
            id: id,
            mode: 'ace/mode/nrjavascript',
            value: value || "",
            stateId: stateId,
            focus: true,
            globals: {
                msg: true,
                context: true,
                RED: true,
                util: true,
                flow: true,
                global: true,
                console: true,
                Buffer: true,
                setTimeout: true,
                clearTimeout: true,
                setInterval: true,
                clearInterval: true,
                next: true
            }
        })
        editor.__stateId = stateId
        return editor
    }

    function buildExpandHandler(editor) {
        return function() {
            var value = editor.getValue()
            RED.editor.editJavaScript({
                value: value,
                width: "Infinity",
                stateId: editor.__stateId,
                mode: "ace/mode/nrjavascript",
                globals: {
                    msg: true,
                    context: true,
                    RED: true,
                    util: true,
                    flow: true,
                    global: true,
                    console: true,
                    Buffer: true,
                    setTimeout: true,
                    clearTimeout: true,
                    setInterval: true,
                    clearInterval: true,
                    next: true
                },
                focus: true,
                complete: function(v, cursor) {
                    editor.setValue(v, -1)
                }
            })
        }
    }

    /**
     * Create middleware edit interface
     * @param container - container
     * @param callbacks - middleware callback functions
     */
    function buildPropertiesList(middlewareContainer, callbacks) {
        middlewareContainer
            .css({
                'min-height': '150px',
                'min-width': '450px'
            })
            .editableList({
                addItem: function(container, i, opt) {
                    // If this is an instance node, these are properties unique to
                    // this instance - ie opt.parent will not be defined.

                    var middlewareRow = $('<div/>').css({
                        overflow: 'hidden',
                        whiteSpace: 'nowrap',
                        display: 'flex'
                    }).appendTo(container);
                    
                    var editorId = "node-input-middleware-editor-" + i
                    var editorEl = $('<div/>', { id: editorId }).css({ 'display': "none" }).appendTo(middlewareRow)
                    var editor = buildEditor(editorId, "state/" + i, "next()")
                    var expandHandler = buildExpandHandler(editor)

                    var callbackFuncCell = $('<div/>').css({ 'flex-grow': 1, 'padding-right': "30px" }).appendTo(middlewareRow)
                    var callbackFun = $('<input/>', { class: "node-input-middleware-callback", type: "text", style: "width: 100%" }).appendTo(callbackFuncCell).typedInput({
                        types: [{
                            value: "callback",
                            label: "Callback",
                            hasValue: false,
                            expand: expandHandler
                        }]
                    }).data("editor", editor)

                    if(opt.value) editor.setValue(opt.value)

                    var actionButton = $('<a/>', { href: "#", class: "red-ui-editableList-item-remove red-ui-button red-ui-button-small" }).appendTo(middlewareRow);
                    $('<i/>', { class: "fa " + (opt.parent ? "fa-reply" : "fa-remove") }).appendTo(actionButton);
                    var removeTip = RED.popover.tooltip(actionButton, RED._("subflow.middleware.remove"));
                    actionButton.on("click", function(evt) {
                        evt.preventDefault();
                        removeTip.close();
                        container.parent().addClass("red-ui-editableList-item-deleting")
                        container.fadeOut(300, function() {
                            middlewareContainer.editableList('removeItem', opt);
                        });
                    });
                },
                sortable: ".red-ui-editableList-item-handle",
                removable: false
            });
        setTimeout(x => {
            (callbacks || []).forEach(function(cb, i) {
                middlewareContainer.editableList('addItem', { value: cb.callback });
            })

        })
    }

    return {
        create: buildPropertiesList
    }
})();
