RED.middleware = (function() {
    function saveMiddleList(list) {
        const items = list.editableList("items")
        const new_middleware = [];
        items.each(function (i,el) {
            var editor = el.find(".node-input-middleware-callback").data("editor")
            if (editor && editor.getValue && editor.getValue()) {
                var item = {
                    callback: editor.getValue()
                };
                editor.destroy()
                new_middleware.push(item);
            }
        });
        return new_middleware;
    }

    function getGlobalConf(create) {
        var gconf = null;
        RED.nodes.eachConfig(function (conf) {
            if (conf.type === "global-config") {
                gconf = conf;
            }
        });
        if ((gconf === null) && create) {
            gconf = {
                id: RED.nodes.id(),
                type: "global-config",
                env: [],
                name: "global-config",
                label: "",
                hasUsers: false,
                users: [],
                credentials: {
                    _ : {},
                    map: {}
                },
                _def: RED.nodes.getType("global-config"),
                middleware: [],
            };
            RED.nodes.add(gconf);
        }
        return gconf;
    }

    function applyChanges(list) {
        var gconf = getGlobalConf(false);
        var new_middleware = [];
        var items = list.editableList('items');
        if (!gconf && list.editableList('length') === 0) {
            // No existing global-config node and nothing in the list,
            // so no need to do anything more
            return
        }
        items.each(function (i,el) {
            var editor = el.find(".node-input-middleware-callback").data("editor")
            if (editor && editor.getValue && editor.getValue()) {
                var item = {
                    callback: editor.getValue()
                };
                editor.destroy()
                new_middleware.push(item);
            }
        });
        if (gconf === null) {
            gconf = getGlobalConf(true);
        }
        if ((JSON.stringify(new_middleware) !== JSON.stringify(gconf.middleware))) {
            gconf.middleware = new_middleware;
            RED.nodes.dirty(true);
        }
    }

    function getSettingsPane() {
        var gconf = getGlobalConf(false);
        var middleware = gconf ? gconf.middleware : [];

        var pane = $("<div/>", {
            id: "red-ui-settings-tab-middleware",
            class: "form-horizontal"
        });
        var content = $("<div/>", {
            class: "form-row node-input-middleware-container-row"
        }).css({
            "margin": "10px"
        }).appendTo(pane);

        var label = $("<label></label>").css({
            width: "100%"
        }).appendTo(content);
        $("<i/>", {
            class: "fa fa-list"
        }).appendTo(label);
        $("<span/>").text(" "+RED._("middleware.header")).appendTo(label);

        var list = $("<ol/>", {
            id: "node-input-middleware-container"
        }).appendTo(content);
        
        RED.editor.middlewareList.create(list, middleware);

        var buttons = $("<div/>").css({
            "text-align": "right",
        }).appendTo(content);
        var revertButton = $("<button/>", {
            class: "red-ui-button"
        }).css({
        }).text(RED._("middleware.revert")).appendTo(buttons);
        
        var items = saveMiddleList(list);
        revertButton.on("click", function (ev) {
            list.editableList("empty");
            list.editableList("addItems", items);
        });

        return pane;
    }

    function init(done) {
        if (!RED.user.hasPermission("settings.write")) {
            RED.notify(RED._("user.errors.settings"),"error");
            return;
        }
        
        RED.userSettings.add({
            id:'middleware',
            title: RED._("middleware.callback"),
            get: getSettingsPane,
            focus: function() {
                var height = $("#red-ui-settings-tab-middleware").parent().height();
                $("#node-input-middleware-container").editableList("height", (height -100));
            },
            close: function() {
                var list = $("#node-input-middleware-container");
                try {
                    applyChanges(list);
                }
                catch (e) {
                    console.log(e);
                    console.log(e.stack);
                }
            }
        });

        RED.actions.add("core:show-global-middleware", function() {
            RED.userSettings.show('middleware');
        });
    }

    return {
        init: init,
    };

})();
